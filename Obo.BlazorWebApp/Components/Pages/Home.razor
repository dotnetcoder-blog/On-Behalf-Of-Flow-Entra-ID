@page "/"
@rendermode InteractiveServer
@using Microsoft.Identity.Web
@using Obo.Objects
@using System.Net.Http.Headers
@inject ITokenAcquisition tokenAcquisition
@inject IHttpContextAccessor Context


<PageTitle>Home</PageTitle>

@if (Context.HttpContext.User.Identity.IsAuthenticated)
{
    <div class="container mt-5">
        <div class="text-center mb-4">
            <div class="row mb-3">
                <div class="col"><img src="obo.png" alt="image" class="img-fluid" /></div>
            </div>
            <div class="row">
                <div class="col">
                    <button class="btn btn-primary" style="width:315px;" @onclick="CallCustomerAPI">Get Customers with Orders</button>
                </div>
            </div>
        </div>
        @if (Customers.Any())
        {
            <div class="container mt-5">
                @if (!obo)
                {
                    <h3 class="text-center mb-4">Getting Orders from Order API using On-behalf-of flow</h3>

                }
                else
                {
                    <h3 class="text-center">Customers from Customer API</h3>
                    <h3 class="text-center">Orders from Order API (OBO flow)</h3>
                }
                <div class="row">
                    @foreach (var customer in Customers)
                    {
                        <div class="col-md-4 mb-4">
                            <div class="card border-primary">
                                <div class="card-header bg-primary text-white">
                                    <h5 class="card-title">@customer.FirstName @customer.LastName</h5>
                                </div>
                                <div class="card-body">
                                    <p class="card-text"><strong>Email:</strong> @customer.Email</p>
                                    <h6 class="card-subtitle mb-2 text-danger">Orders:</h6>
                                    @if (customer.Orders != null && customer.Orders.Any())
                                    {
                                        <ul class="list-group">
                                            @foreach (var order in customer.Orders)
                                            {
                                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                                    Order ID: @order.OrderId
                                                    <span class="badge bg-primary rounded-pill">@order.TotalAmount.ToString("C")</span>
                                                </li>
                                            }
                                        </ul>
                                    }
                                    else
                                    {
                                        <p class="text-muted">No Orders</p>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        @if (loading)
        {
            <div class="d-flex justify-content-center">
                <div class="spinner-border custom-spinner" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
    </div>
}
else
{
    <p>Login in to see this page</p>

}

@code{

    private IEnumerable<Customer> Customers = [];
    private bool loading = false;
    private bool obo = false;


    protected async Task CallCustomerAPI()
    {
        loading = true;

        string[] scopes = [$"api://80f34725-e5bf-4c8a-859c-5c6ba84cd585/access_as_user"];
        var accessToken = await tokenAcquisition.GetAccessTokenForUserAsync(scopes);

        using var httpClient = new HttpClient { BaseAddress = new Uri("https://localhost:7019/api/customers/") };
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
        Customers = await httpClient.GetFromJsonAsync<IEnumerable<Customer>>("all");
        loading = false;

    }
}

<style>
        .card {
            transition: transform 0.2s;
        }

            .card:hover {
                transform: scale(1.05);
            }

        .text-danger {
            color: red;
        }

        .custom-spinner {
            width: 3rem;
            height: 3rem;
        }

        .img-fluid {
            max-width: 300px;
            height: auto;
        }

        .custom-table td {
            width: 400px;
            vertical-align: middle;
        }

        .custom-table {
            width: 800px;
            margin: 0 auto;
            border-collapse: separate;
        }

        .btn-outline-primary {
            width: 100%;
        }
</style>